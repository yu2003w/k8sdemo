apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  labels:
    app: redis-cluster
  name: redis-cluster
spec:
  selector:
    app: redis-node
  ports:
  - name: redis
    port: 6379
  - name: cluster
    port: 16379
  #type: NodePort
  clusterIP: None

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app: redis-cluster
spec:
  replicas: 6
  selector:
    matchLabels:
      app: redis-node
  serviceName: "redis-cluster"
  template:
    metadata:
      labels:
        app: redis-node
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      containers:
      - name: redis
        image: docker-registry-default.ai-dev.asiainfo.com/brokers/redis:3.2
        imagePullPolicy: Always
        ports:
        - containerPort: 6379
          protocol: TCP
          name: redis
        - containerPort: 16379
          protocol: TCP
          name: cluster
        volumeMounts:
            - mountPath: "/var/lib/redis/"
              name: redis-data
      - name: redis-manager
        image: docker-registry-default.ai-dev.asiainfo.com/brokers/redismanager:3.2
        imagePullPolicy: Always
        command:
        - bash
        - "-c"
        - |
          set -e
          peer-finder -on-start="/usr/local/bin/cluster-meet.sh" -service=redis-cluster -ns=brokers
          sleep infinity
      volumes:
        - name: redis-data
          emptyDir: {}
          #persistentVolumeClaim:
          #  claimName: mysql-claim 
